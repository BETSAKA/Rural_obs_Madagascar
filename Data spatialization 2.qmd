---
title: "ROR data spatialization"
author: "Florent Bédécarrats"
format: html
editor: visual
---

## Cleanig and harmonizing the municipality

### Preparing the Data for Municipality Matching

To accurately merge datasets with varying administrative names, we often have to utilize a combination of automated processes and manual review. Our approach consists of the following major steps:

1. **Reading and Preprocessing Survey Data:** Initial handling of raw survey data to extract and standardize municipality names.
2. **Processing GADM Data:** GADM offers a comprehensive spatial dataset, which we leverage for authoritative municipality names.
3. **Fuzzy Matching:** Given the potential discrepancies between names in different datasets, a fuzzy string matching technique is applied to assess the degree in which the municipality names found in the ROR survey differ from their closest match in GADM dataset.
4. **Computing Relative Distance and Preparing for Manual Review:** The relative difference between matched strings is used to guide our manual review process.

```{r load_libraries}
# Load required libraries
library(tidyverse)
library(stringdist)
library(sf)
library(writexl)
```

### Read and preprocess survey data

The primary goal of this step is to extract and preprocess the municipality names from our survey data. By doing so, we prepare our dataset for the subsequent matching process with the authoritative GADM dataset.

```{r}
# Define path to the survey data
deb_files <- list.files(path = "enter", pattern = "res_deb", 
                        recursive = TRUE, 
                        full.names = TRUE) %>%
  str_subset("stunicode", negate = TRUE)

# Define variables related to locations
location_variables <- list(
  year = "data collection year",
  j0 = "observatory code",
  obs = "observatory",
  j41 = "municipality code",
  j42 = "municipality name",
  j4_code = "village code",
  j4 = "village name",
  code_site = "site code")

# Extract location-related data from the survey files and preprocess
location_values <- deb_files %>%
  map(~ read_dta(.x) %>%
        mutate(across(where(is.labelled), ~ as.character(as_factor(.))))) %>%
  map(~ select(.x, any_of(names(location_variables)))) %>%
  map(~ .x %>% mutate_all(as.character)) %>%
  map(unique) %>%
  bind_rows() %>%
  rename(obs_code = j0, muni_code = j41, muni = j42, hamlet_code = j4_code,
         hamlet = j4, site_code = code_site) %>%
  mutate(muni = str_to_upper(muni))
```

As a resukts we have a list of all variation of location variables found in the data. We have a total of `r `nrow(location_values)` different commune and vilage names.

### Processing GADM Data

The GADM (Global Administrative Areas) database provides up-to-date administrative boundaries and names for all countries globally. Here, we extract the municipal names for Madagascar. These serve as our reference set in the subsequent matching process.

```{r load_gadm}
# Load the GADM data for Madagascar at level 4 (municipality level)
munis_gadm <- gadm("MDG", level  = 4, path = "data") %>%
  st_as_sf() %>%
  mutate(muni = str_to_upper(NAME_4))
```

### Fuzzy Matching Process

Given that different datasets might have slight variations in naming conventions or typographical differences, a simple direct match can often overlook correct pairings. By employing a fuzzy string matching method, we can capture these near-matches more effectively. Here, we compute a distance matrix to identify the closest possible matches between our two sets of municipality names.

```{r fuzzy_matching}
# Compute the distance matrix between municipality names in the survey data and GADM data
distance_matrix <- stringdistmatrix(location_values$muni, munis_gadm$muni, 
                                    method = "lv")

# Find the closest match for each municipality name in the survey data
closest_matches <- apply(distance_matrix, 1, which.min) %>%
  as.integer()

# Calculate the proximity grades for each match
proximity_grades <- apply(distance_matrix, 1, min) %>%
  as.numeric()

# Bind the municipality names, their closest matches, and the proximity grades into a tibble
muni_matches <- tibble(
  muni_ror = location_values$muni,
  closest_gadm_name = munis_gadm$muni[closest_matches],
  proximity_grade = proximity_grades)
```

### Preparing for Manual Review

While the fuzzy matching approach identifies potential matches, its output requires validation. One way to prioritize entries for manual review is by computing the relative difference between matched strings. Entries with larger relative differences can be reviewed first as they're more likely to be inaccuracies.

```{r prep_manual_review}
# Calculate the relative distance for each match
muni_matches$relative_distance <- (muni_matches$proximity_grade / nchar(muni_matches$muni_ror)) * 100

# Order the dataset by relative distance in descending order
review_dataset <- muni_matches %>%
  arrange(desc(relative_distance))

# Export the dataset for manual review
writexl::write_xlsx(review_dataset, "review_muni_matches.xlsx")
```

