---
title: "Appendix: data spatialization"
author: "Florent Bédécarrats"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(haven)
library(labelled)
library(geodata)
library(sf)
library(stringdist)
```


## Extract a list of location values

```{r}
deb_files <- list.files(path = "enter", pattern = "res_deb", 
                        recursive = TRUE, 
                        full.names = TRUE) %>%
  str_subset("stunicode", negate = TRUE) 

location_variables <- list(
  year = "data collection year",
  j0 = "observatory code",
  obs = "observatory",
  j41 = "municipality code",
  j42 = "municipality name",
  j4_code = "village code",
  j4 = "village name",
  code_site = "site code")

location_values <- deb_files %>%
  map(~ read_dta(.x) %>%
        mutate(across(where(is.labelled), ~ as.character(as_factor(.))))) %>%
  map(~ select(.x, any_of(names(location_variables)))) %>%
  map(~ .x %>% mutate_all(as.character)) %>%
  map(unique) %>%
  bind_rows() %>%
  rename(obs_code = j0, muni_code = j41, muni = j42, hamlet_code = j4_code,
         hamlet = j4, site_code = code_site)
```


# Compare to official lists of localities


```{r}


# Harmonize names

location_values2 <- location_values %>%
  mutate(across(where(is.character), ~ str_to_upper(.))) %>%
  mutate(across(where(is.character), ~str_replace_all(., "/", " "))) %>%
  mutate(across(where(is.character), ~str_remove_all(., " CENTRE")))

# Check municipality names
munis_ror_names <- location_values2 %>%
  select(muni) %>%
  unique() %>%
  pluck("muni")


munis_gadm <- gadm("MDG", level  = 4, path = "data") %>%
  st_as_sf()

munis_gadm_names <- munis_gadm %>%
  st_drop_geometry() %>%
  select(muni = NAME_4) %>%
  mutate(muni = str_to_upper(muni)) %>%
  pluck("muni")


# We do this operation only once as it is very long to process
if (!file.exists("data/distance_matrix_munis.rds")) {
  # Compute Levenshtein distance to find closest match in GADM
  distance_matrix <- stringdistmatrix(munis_ror, munis_gadm, method = "lv")
  write_rds(distance_matrix, "data/distance_matrix_munis.rds")
}


closest_matches <- apply(distance_matrix, 1, which.min)
proximity_grades <- apply(distance_matrix, 1, min)

muni_names_matches <- tibble(munis_ror = munis_ror,
                             closest_gadm_name = munis_gadm[closest_matches],
                             proximity_grade = proximity_grades)


munis_both <- munis_ror_names %>%
  left_join(munis_gadm_names)


munis_gadm <- read_rds("data/gadm/gadm41_MDG_3_pk.rds") %>%
  st_to_sf()
locs_gadm <- gadm("MDG", level  = 4, path = "data")


# Match to existing municipalities
```


