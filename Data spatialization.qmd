---
title: "Appendix: data spatialization"
author: "Florent Bédécarrats"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(haven)
library(labelled)
library(geodata)
library(sf)
library(stringdist)
```

## Extract a list of location values

```{r}
deb_files <- list.files(path = "enter", pattern = "res_deb", 
                        recursive = TRUE, 
                        full.names = TRUE) %>%
  str_subset("stunicode", negate = TRUE) 

location_variables <- list(
  year = "data collection year",
  j0 = "observatory code",
  obs = "observatory",
  j41 = "municipality code",
  j42 = "municipality name",
  j4_code = "village code",
  j4 = "village name",
  code_site = "site code")

location_values <- deb_files %>%
  map(~ read_dta(.x) %>%
        mutate(across(where(is.labelled), ~ as.character(as_factor(.))))) %>%
  map(~ select(.x, any_of(names(location_variables)))) %>%
  map(~ .x %>% mutate_all(as.character)) %>%
  map(unique) %>%
  bind_rows() %>%
  rename(obs_code = j0, muni_code = j41, muni = j42, hamlet_code = j4_code,
         hamlet = j4, site_code = code_site)
```

# Compare to official lists of localities

```{r}

# Harmonize names
location_values2 <- location_values %>%
  mutate(across(where(is.character), ~ str_to_upper(.))) %>%
  mutate(across(where(is.character), ~str_replace_all(., "/", " "))) %>%
  mutate(across(where(is.character), ~str_remove_all(., " CENTRE")))

# Check municipality names
munis_ror_names <- location_values2 %>%
  select(muni) %>%
  unique() %>%
  pluck("muni")


munis_gadm <- gadm("MDG", level  = 4, path = "data") %>%
  st_as_sf()

munis_gadm_names <- munis_gadm %>%
  st_drop_geometry() %>%
  select(muni = NAME_4) %>%
  mutate(muni = str_to_upper(muni)) %>%
  pluck("muni")



# Compute Levenshtein distance to find closest match in GADM
distance_matrix <- stringdistmatrix(munis_ror_names, munis_gadm_names, 
                                    method = "lv")
# write_rds(distance_matrix, "data/distance_matrix_munis.rds")


closest_matches <- apply(distance_matrix, 1, which.min) %>%
  as.integer()
proximity_grades <- apply(distance_matrix, 1, min) %>%
  as.numeric()
muni_names_matches <- tibble(munis_ror = munis_ror_names,
                             closest_gadm_name = munis_gadm_names[closest_matches],
                             proximity_grade = proximity_grades)

 #writexl::write_xlsx(muni_names_matches, "muni_names_matches.xlsx")
# Match to existing municipalities
```


Attempt on 2007
```{r}
# Prepare data for 2007
loc_2007 <- location_values %>%
  filter(year == 2007) %>%
  mutate(muni_ror = str_to_upper(muni)) %>%
  mutate(muni_ror = str_replace_all(muni_ror, "/", " ")) %>%
  mutate(muni_ror = str_remove_all(muni_ror, " CENTRE"))

# Check municipality names
munis_ror2007_names <- loc_2007 %>%
  select(muni_ror) %>%
  unique() %>%
  pluck("muni_ror")

munis_gadm <- gadm("MDG", level  = 4, path = "data") %>%
  st_as_sf() %>%
  mutate(muni = str_to_upper(NAME_4))

munis_gadm_names <- munis_gadm %>%
  pluck("muni")

distance_matrix <- stringdistmatrix(munis_ror2007_names, munis_gadm_names, 
                                    method = "lv")
closest_matches <- apply(distance_matrix, 1, which.min) %>%
  as.integer()
proximity_grades <- apply(distance_matrix, 1, min) %>%
  as.numeric()

muni_names_matches_2007 <- tibble(
  muni_ror = munis_ror2007_names,
  closest_gadm_name = munis_gadm_names[closest_matches],
  proximity_grade = proximity_grades) %>%
  mutate(verif = "")
# Some matches proposed by this technique are obviously wrong (11/109)
# We corrected them manually
# writexl::write_xlsx(muni_names_matches_2007, "muni_names_matches_2007.xlsx")
manual_matches <- tibble::tribble(
                     ~muni_ror,     ~manual_match,              ~source_match,
          "FERAMANGA-AVARATRA",     "AMBANDRIKA",      "OCHA located places",
          "FERAMANGA AVARATRA",     "AMBANDRIKA",      "OCHA located places",
                   "AMBODIADY",   "AMBODIFARIHY",                   "Visual",
                 "ANDROKAVATO",         "AMBANO", "agritrop.cirad.fr/558679",
"VOHITROMBY VOHITROMBY CENTRE",     "VOHITROMBY",                   "Visual",
   "AMBATOHARANANA MAHANTSARA", "AMBATOHARANANA",                   "Visual",
 "AMBATOHARANANA AMBODIBARIKA", "AMBATOHARANANA",                   "Visual",
                    "BEZEZIKA",     "ANKILIVALO",      "OCHA located places",
                    "BEKININY",         "BEFASY",      "OCHA located places",
                "FORT DAUPHIN",       "TOLANARO",                "Wikipedia",
              "TSIVORY CENTRE",        "TSIVORY",                   "Visual")

# We use the automatic match or manual one when we created one
muni_names_matches_2007 <- muni_names_matches_2007 %>%
  left_join(select(manual_matches, muni_ror, manual_match),
            by = join_by("muni_ror")) %>%
  mutate(gadm_match = ifelse(is.na(manual_match), 
                             closest_gadm_name, manual_match)) %>%
  select(muni_ror, gadm_match) %>%
  left_join()

# Get the original names back into loc_2007
loc_2007_2 <- muni_names_matches_2007 %>%
  left_join(munis_gadm %>%
              st_drop_geometry() %>%
              select(gadm_match = muni, name_gadm = NAME_4),
            by = join_by("gadm_match")) 


munis_gadm %>%
  st_drop_geometry() %>%
  group_by(NAME_1, NAME_4) %>%
  summarize(count = n()) %>%
  filter(count > 1)



# Andrakavato est un hameau de la commune d'Ambano
# Source: https://agritrop.cirad.fr/558679/1/document_558679.pdf
```


```{r}
# Define a function to load and count surveys per observatory for a given year
load_and_count <- function(year) {
  # Define file path
  file_path <- paste0("enter/", year, "/res_deb.dta")
  
  # Load data
  data <- read_dta(file_path)
  
  # Count surveys per observatory
  count_data <- data %>%
    group_by(j0) %>%
    summarise(survey_count = n()) %>%
    ungroup() %>%
    mutate(year = year)  # Add year column
  
  return(count_data)
}

# Generate a list of years
years <- 1995:2015

# Use purrr::map_df to loop through each year and bind results
result <- map_df(years, load_and_count)

# Print the result
print(result)
```




